{%- include "installation" -%}

# Synopsis
```ts
import getHelp, { chalk } from "meow-helper";
import { readFileSync } from "fs";
```

```js
const { default: getHelp, chalk } = require("meow-helper");
const { readFileSync } = require("fs");
```

```ts
const flags = {
  cwd: { alias: "c", type: "string", desc: "Current CWD." },
  verbose: { alias: "v", type: "boolean", desc: "Add extra info." }
};

const args = { "path...": "Paths of files." };
const pkg = JSON.parse(readFileSync(join(__dirname, "../../package.json"), { encoding: "utf8" }));

meow(getHelp({ flags, args, pkg }), { flags, allowUnknownFlags: false });
```

```ts
const help = getHelp({
  lineLength: 80,
  titleLength: 15,
  pkg: {}, // package.json data
  command: "not-sync",
  description: "Description of the command",
  args: { path: "Path of file." },
  flags, // meow flags with `desc` key.
  examples: ["not-sync node_modules,dist,coverage", "not-sync node_modules,dist,coverage --ignoreConfigs .gitignore"],
  multilineThreshold: 50,
  autoHelp: true,
  notThrow: true,
})
```

# Details

`meow-helper` generates single-line or multi-line help text based on the `multilineThreshold` option automatically.

## Single-Line
![meow-helper help text in single line mode](./module-files/images/single-line.png)

## Multi-Line
![meow-helper help text in multi line mode](./module-files/images/multi-line.png)

# Highlights

- Formats, colorizes, and aligns arguments, options, default values, and their descriptions.
- `meow` throws unknown flags with the `allowUnknownFlags` option. `meow-helper` shows help text instead of throwing. We can change this behavior with the `notThrow` option.
- Supports maximum line length and automatic word wrap.
- Splits options into two lines if space for description is too small. We can change this behavior with the `multilineThreshold` option.)
- Switches single line to multi-line if option descriptions have a small space. We can change this behavior with the `multilineThreshold` option.
- Color output with background colored titles.
- Generates usage section.
- Colorizes `command` at the start of usage and examples.
- Adds `$` at the start of provided `usage` and `examples`.
- Exports [chalk](https://www.npmjs.com/package/chalk).
- Supports both `{ autoHelp: true }` and `{ autoHelp: false }`. Adds a description to help if required.
- Moves three dots in arguments outside of brackets. For example: `args: { “path...” }` becomes `command <path>...`

<!-- usage -->

<!-- commands -->

# API

{% include "api.md" %}
